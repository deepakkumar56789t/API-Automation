<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="VTS" enabled="true">
      <stringProp name="TestPlan.comments">Load test suite for VTS</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Input Parameters" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="threadCount" elementType="Argument">
            <stringProp name="Argument.name">threadCount</stringProp>
            <stringProp name="Argument.value">6</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="environment" elementType="Argument">
            <stringProp name="Argument.name">environment</stringProp>
            <stringProp name="Argument.value">pp</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Setup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="PP" enabled="true">
          <stringProp name="IfController.condition">&quot;${__P(environment,${environment})}&quot;.toUpperCase() == &quot;PP&quot; || &quot;${__P(environment,${environment})}&quot;.toUpperCase() == &quot;PREPROD&quot; || &quot;${__P(environment,${environment})}&quot;.toUpperCase() == &quot;PREPRODUCTION&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">${__setProperty(panLunar, 4871450077490998)};
${__setProperty(encryptedDataLunarExpMonth, 10)};
${__setProperty(encryptedDataLunarExpYear, 2024)};
${__setProperty(clientWalletAccountID, PPKSarajJ6V1qMqlJwQVnbvmCQPROD)};
${__setProperty(tokenRequestorID_GPay, 40010075001)};
${__setProperty(tokenRequestorID_ApplePay, 40010030273)};
${__setProperty(tokenRequestorID_DeviceBinding, 40010077056)};
${__setProperty(lunarPanRefID, V-2020040246611508247349)};</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="checkQuery">select 1 from dual</stringProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="connectionProperties"></stringProp>
            <stringProp name="dataSource">pp</stringProp>
            <stringProp name="dbUrl">jdbc:oracle:thin:@//no2-ktdb-5:1521/k2lcm_dg_rw_jdbc</stringProp>
            <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
            <stringProp name="initQuery"></stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="password">ls1467387259</stringProp>
            <stringProp name="poolMax">0</stringProp>
            <boolProp name="preinit">false</boolProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <stringProp name="username">LCM</stringProp>
          </JDBCDataSource>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Demo" enabled="true">
          <stringProp name="IfController.condition">&quot;${__P(environment,${environment})}&quot;.toUpperCase() == &quot;DEMO&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">${__setProperty(panLunar, 4871451134897282)};
${__setProperty(encryptedDataLunarExpMonth, 9)};
${__setProperty(encryptedDataLunarExpYear, 2025)};
${__setProperty(clientWalletAccountID, PPKSarajJ6V1qMqlJwPRODDEMO)};
${__setProperty(tokenRequestorID_DeviceBinding, 40010036958)};
${__setProperty(lunarPanRefID, V-2020040246611508247349)};
${__setProperty(tokenRequestorID_GPay, 40010075001)};
${__setProperty(tokenRequestorID_ApplePay, 40010030273)};</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="checkQuery">select 1 from dual</stringProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="connectionProperties"></stringProp>
            <stringProp name="dataSource">demo</stringProp>
            <stringProp name="dbUrl">jdbc:oracle:thin:@//vm-ppdb-134:1521/a2digi</stringProp>
            <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
            <stringProp name="initQuery"></stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="password">lc873652619</stringProp>
            <stringProp name="poolMax">0</stringProp>
            <boolProp name="preinit">false</boolProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <stringProp name="username">LCM_CUST</stringProp>
          </JDBCDataSource>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="GetAccount" enabled="true">
          <stringProp name="dataSource">${environment}</stringProp>
          <stringProp name="query">select a.account, a.account_expiry from account_info a where a.account in (&apos;4871450676881621&apos;,&apos;4871450823091678&apos;,&apos;4871450886273544&apos;,&apos;4871450150361116&apos;,&apos;4871450157779153&apos;,&apos;4871450158703863&apos;) fetch first ${threadCount} rows only</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">account,accountExp</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetAccount" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">try {
	var length = 0;
	int threads = Integer.parseInt(vars.get(&quot;threadCount&quot;));
	
	for (var idx=1; idx &lt;= threads; idx++) {
		if (vars.get(&quot;account_&quot;+idx) != null) {			
			var month = String.valueOf(vars.get(&quot;accountExp_&quot;+idx)).substring(0,2);
			var year = String.valueOf(vars.get(&quot;accountExp_&quot;+idx)).substring(2,6);
			
			props.put(&quot;account_&quot; + idx, String.valueOf(vars.get(&quot;account_&quot;+idx)));
			props.put(&quot;accountExpMonth_&quot; + idx, month);
			props.put(&quot;accountExpYear_&quot; + idx, year);
			length++;
		}
		else
			break;			
	}

	if (length &lt; threads) {
		for (var idx=1; idx &lt;= threads; idx++) {
			int min = 1;
			int random =  min + (int) (Math.random() * ((length - min) + 1));			
			var randomInt = random;
			
			var month = String.valueOf(vars.get(&quot;accountExp_&quot;+randomInt)).substring(0,2);
			var year = String.valueOf(vars.get(&quot;accountExp_&quot;+randomInt)).substring(2,6);
			
			props.put(&quot;account_&quot; + idx, String.valueOf(vars.get(&quot;account_&quot;+randomInt)));
			props.put(&quot;accountExpMonth_&quot; +idx, month);
			props.put(&quot;accountExpYear_&quot; + idx, year);
		}
	}

//	for (var idx=1; idx &lt;= threads; idx++) {
//		log.info(&quot;The account is &quot; + props.get(&quot;account_&quot; + idx));
//		log.info(&quot;The account exp month is &quot; + props.get(&quot;accountExpMonth_&quot; +idx));
//		log.info(&quot;The account exp year is &quot; + props.get(&quot;accountExpYear_&quot; + idx));		
//	}
} catch (Exception e) {
	log.error(e.getMessage());
}</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="TestPlan.comments">To fetch valid account for click2pay</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Prerequisite" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads,${threadCount})}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetEncryptedData-CE" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;cardholderInfo&quot;:{&#xd;
    &quot;primaryAccountNumber&quot;:&quot;${__P(account_${__threadNum})}&quot;,&#xd;
    &quot;name&quot;:&quot;dhyfcgyjfyukiftjude&quot;,&#xd;
    &quot;expirationDate&quot;:{&#xd;
          &quot;month&quot;:&quot;${__P(accountExpMonth_${__threadNum})}&quot;,&#xd;
         &quot;year&quot;:&quot;${__P(accountExpYear_${__threadNum})}&quot;&#xd;
      }&#xd;
  },&#xd;
  &quot;highValueCustomer&quot;:&quot;false&quot;,&#xd;
  &quot;riskAssessmentScore&quot;:&quot;99&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">encryption-decryption-utility-lcm-t.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/lcm/encryption</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Get encrypted data for check eligibility</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">encrypted_Value_CE_Lunar</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedValue</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetEncryptedData-AP-Green" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;cardholderInfo&quot;:{&#xd;
      &quot;cvv2&quot;:&quot;123&quot;,&#xd;
      &quot;name&quot;:&quot;abc&quot;,&#xd;
      &quot;riskAssessmentScore&quot;:&quot;99&quot;,&#xd;
	&quot;primaryAccountNumber&quot;:&quot;${__P(account_${__threadNum})}&quot;,&#xd;
      &quot;billingAddress&quot;:{&#xd;
         &quot;postalCode&quot;:&quot;48800&quot;,&#xd;
         &quot;line1&quot;:&quot;Otsonkatu 19&quot;&#xd;
      },&#xd;
      &quot;highValueCustomer&quot;:false,&#xd;
      &quot;expirationDate&quot;:{&#xd;
         &quot;month&quot;:&quot;${__P(accountExpMonth_${__threadNum})}&quot;,&#xd;
         &quot;year&quot;:&quot;${__P(accountExpYear_${__threadNum})}&quot;&#xd;
      }&#xd;
   },&#xd;
   &quot;riskInformation&quot;:{&#xd;
      &quot;visaTokenScore&quot;:&quot;99&quot;,&#xd;
      &quot;riskAssessmentScore&quot;:&quot;99&quot;,&#xd;
      &quot;visaTokenDecisioning&quot;:&quot;99&quot;,&#xd;
      &quot;walletProviderAccountScore&quot;:&quot;5&quot;,&#xd;
      &quot;walletProviderDeviceScore&quot;:&quot;5&quot;,&#xd;
      &quot;walletProviderReasonCodes&quot;:&quot;A0,A2&quot;,&#xd;
      &quot;accountHolderName&quot;:&quot;abc&quot;&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">encryption-decryption-utility-lcm-t.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/lcm/encryption</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Get encrypted data forapprove provisioning</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">encrypted_Value_AP_Lunar_Green</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedValue</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetEncryptedData-AP-Orange" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;cardholderInfo&quot;:{&#xd;
      &quot;cvv2&quot;:&quot;123&quot;,&#xd;
      &quot;name&quot;:&quot;abc&quot;,&#xd;
      &quot;riskAssessmentScore&quot;:&quot;99&quot;,&#xd;
      &quot;primaryAccountNumber&quot;:&quot;${__P(account_${__threadNum})}&quot;,&#xd;
      &quot;billingAddress&quot;:{&#xd;
         &quot;postalCode&quot;:&quot;48800&quot;,&#xd;
         &quot;line1&quot;:&quot;Otsonkatu 19&quot;&#xd;
      },&#xd;
      &quot;highValueCustomer&quot;:false,&#xd;
      &quot;expirationDate&quot;:{&#xd;
          &quot;month&quot;:&quot;${__P(accountExpMonth_${__threadNum})}&quot;,&#xd;
         &quot;year&quot;:&quot;${__P(accountExpYear_${__threadNum})}&quot;&#xd;
      }&#xd;
   },&#xd;
   &quot;riskInformation&quot;:{&#xd;
      &quot;visaTokenScore&quot;:&quot;99&quot;,&#xd;
      &quot;riskAssessmentScore&quot;:&quot;99&quot;,&#xd;
      &quot;visaTokenDecisioning&quot;:&quot;99&quot;,&#xd;
      &quot;walletProviderAccountScore&quot;:&quot;5&quot;,&#xd;
      &quot;walletProviderDeviceScore&quot;:&quot;5&quot;,&#xd;
      &quot;walletProviderReasonCodes&quot;:&quot;0G&quot;,&#xd;
      &quot;accountHolderName&quot;:&quot;abc&quot;&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">encryption-decryption-utility-lcm-t.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/lcm/encryption</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Get encrypted data forapprove provisioning</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">encrypted_Value_AP_Lunar_Orange</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedValue</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetEncryptedData-AP-Yellow" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;cardholderInfo&quot;:{&#xd;
      &quot;cvv2&quot;:&quot;123&quot;,&#xd;
      &quot;name&quot;:&quot;abc&quot;,&#xd;
      &quot;riskAssessmentScore&quot;:null,&#xd;
      &quot;primaryAccountNumber&quot;:&quot;${__P(account_${__threadNum})}&quot;,&#xd;
      &quot;billingAddress&quot;:{&#xd;
         &quot;postalCode&quot;:&quot;48800&quot;,&#xd;
         &quot;line1&quot;:&quot;Otsonkatu 19&quot;&#xd;
      },&#xd;
      &quot;highValueCustomer&quot;:false,&#xd;
      &quot;expirationDate&quot;:{&#xd;
          &quot;month&quot;:&quot;${__P(accountExpMonth_${__threadNum})}&quot;,&#xd;
         &quot;year&quot;:&quot;${__P(accountExpYear_${__threadNum})}&quot;&#xd;
      }&#xd;
   },&#xd;
   &quot;riskInformation&quot;:{&#xd;
      &quot;visaTokenScore&quot;:&quot;99&quot;,&#xd;
      &quot;riskAssessmentScore&quot;:&quot;99&quot;,&#xd;
      &quot;visaTokenDecisioning&quot;:&quot;99&quot;,&#xd;
      &quot;walletProviderAccountScore&quot;:&quot;5&quot;,&#xd;
      &quot;walletProviderDeviceScore&quot;:null,&#xd;
      &quot;walletProviderReasonCodes&quot;:null,&#xd;
      &quot;accountHolderName&quot;:&quot;abc&quot;&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">encryption-decryption-utility-lcm-t.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/lcm/encryption</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Get encrypted data forapprove provisioning</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">encrypted_Value_AP_Lunar_Yellow</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedValue</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetEncryptedData-AP-Red" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;cardholderInfo&quot;:{&#xd;
      &quot;cvv2&quot;:&quot;123&quot;,&#xd;
      &quot;name&quot;:&quot;abc&quot;,&#xd;
      &quot;riskAssessmentScore&quot;:&quot;10&quot;,&#xd;
      &quot;primaryAccountNumber&quot;:&quot;${__P(account_${__threadNum})}&quot;,&#xd;
      &quot;billingAddress&quot;:{&#xd;
         &quot;postalCode&quot;:&quot;48800&quot;,&#xd;
         &quot;line1&quot;:&quot;Otsonkatu 19&quot;&#xd;
      },&#xd;
      &quot;highValueCustomer&quot;:false,&#xd;
      &quot;expirationDate&quot;:{&#xd;
          &quot;month&quot;:&quot;${__P(accountExpMonth_${__threadNum})}&quot;,&#xd;
         &quot;year&quot;:&quot;${__P(accountExpYear_${__threadNum})}&quot;&#xd;
      }&#xd;
   },&#xd;
   &quot;riskInformation&quot;:{&#xd;
      &quot;visaTokenScore&quot;:&quot;33&quot;,&#xd;
      &quot;riskAssessmentScore&quot;:&quot;10&quot;,&#xd;
      &quot;visaTokenDecisioning&quot;:&quot;85&quot;,&#xd;
      &quot;walletProviderAccountScore&quot;:&quot;5&quot;,&#xd;
      &quot;walletProviderDeviceScore&quot;:&quot;5&quot;,&#xd;
      &quot;walletProviderReasonCodes&quot;:&quot;0G,0B,03,04,09&quot;,&#xd;
      &quot;accountHolderName&quot;:&quot;abc&quot;&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">encryption-decryption-utility-lcm-t.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/lcm/encryption</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Get encrypted data for approve provisioning red flow</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">encrypted_Value_AP_Lunar_Red</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedValue</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetEncryptedData-GetCVM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;cardholderInfo&quot;:{&#xd;
      &quot;primaryAccountNumber&quot;:&quot;${__P(account_${__threadNum})}&quot;&#xd;
   },&#xd;
   &quot;riskInformation&quot;:{&#xd;
      &quot;walletProviderRiskAssessment&quot;:&quot;1&quot;,&#xd;
      &quot;walletProviderRiskAssessmentVersion&quot;:&quot;10&quot;,&#xd;
      &quot;walletProviderAccountScore&quot;:&quot;5&quot;,&#xd;
      &quot;walletProviderReasonCodes&quot;:&quot;A1,A2&quot;,&#xd;
      &quot;deviceBluetoothMac&quot;:&quot;354534545454545646&quot;,&#xd;
      &quot;deviceIMEI&quot;:&quot;23534545454656546463564&quot;,&#xd;
      &quot;deviceSerialNumber&quot;:&quot;23534545454656546463564&quot;,&#xd;
      &quot;deviceTimeZone&quot;:&quot;MST&quot;,&#xd;
      &quot;deviceTimeZoneSetting&quot;:&quot;NETWORK_SET&quot;,&#xd;
      &quot;osID&quot;:&quot;32535455454666656&quot;,&#xd;
      &quot;simSerialNumber&quot;:&quot;string&quot;,&#xd;
      &quot;deviceLostMode&quot;:&quot;999&quot;,&#xd;
      &quot;daysSinceConsumerDataLastAccountChange&quot;:&quot;9&quot;,&#xd;
      &quot;accountHolderName&quot;:&quot;Aamir&quot;,&#xd;
      &quot;walletProviderPANAge&quot;:&quot;9&quot;,&#xd;
      &quot;walletAccountHolderCardNameMatch&quot;:&quot;y&quot;,&#xd;
      &quot;accountToDeviceBindingAge&quot;:&quot;1&quot;,&#xd;
      &quot;userAccountFirstCreated&quot;:&quot;12&quot;,&#xd;
      &quot;provisioningAttemptsOnDeviceIn24Hours&quot;:&quot;12&quot;,&#xd;
      &quot;distinctCardholderNames&quot;:&quot;99&quot;,&#xd;
      &quot;deviceCountry&quot;:&quot;IN&quot;,&#xd;
      &quot;walletAccountCountry&quot;:&quot;IN&quot;,&#xd;
      &quot;suspendedCardsInAccount&quot;:&quot;99&quot;,&#xd;
      &quot;daysSinceLastAccountActivity&quot;:&quot;9&quot;,&#xd;
      &quot;numberOfTransactionsInLast12months&quot;:&quot;9&quot;,&#xd;
      &quot;numberOfActiveTokens&quot;:&quot;99&quot;,&#xd;
      &quot;deviceWithActiveTokens&quot;:&quot;99&quot;,&#xd;
      &quot;activeTokensOnAllDeviceForAccount&quot;:&quot;9&quot;,&#xd;
      &quot;visaTokenScore&quot;:&quot;99&quot;,&#xd;
      &quot;visaTokenDecisioning&quot;:&quot;00&quot;,&#xd;
      &quot;walletProviderDeviceScore&quot;:&quot;3&quot;&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">encryption-decryption-utility-lcm-t.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/lcm/encryption</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Get encrypted data for getCVM</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">encrypted_Value_CVM_Lunar</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedValue</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetEncryptedData-SendPasscode" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;cardholderInfo&quot;:{&#xd;
      &quot;primaryAccountNumber&quot;:&quot;${__P(account_${__threadNum})}&quot;&#xd;
   },  &#xd;
  &quot;tokenInfo&quot;:{&#xd;
    &quot;tokenRequestorName&quot;:&quot;GPay Passcode&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">encryption-decryption-utility-lcm-t.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/lcm/encryption</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Get encrypted data for sendPasscode</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">encrypted_Value_SP_Lunar</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedValue</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetEncryptedData-CreateToken" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;cardholderInfo&quot;:{&#xd;
      &quot;name&quot;:&quot;abc&quot;,&#xd;
      &quot;primaryAccountNumber&quot;:&quot;${__P(account_${__threadNum})}&quot;,&#xd;
      &quot;billingAddress&quot;:{&#xd;
 &quot;line1&quot;: &quot;Otsonkatu 19&quot;,&#xd;
      &quot;postalCode&quot;: &quot;48800&quot;&#xd;
      },&#xd;
      &quot;highValueCustomer&quot;:false,&#xd;
      &quot;expirationDate&quot;:{&#xd;
          &quot;month&quot;:&quot;${__P(accountExpMonth_${__threadNum})}&quot;,&#xd;
         &quot;year&quot;:&quot;${__P(accountExpYear_${__threadNum})}&quot;&#xd;
      }&#xd;
   },&#xd;
   &quot;riskInformation&quot;:{&#xd;
      &quot;visaTokenScore&quot;:&quot;33&quot;,&#xd;
      &quot;visaTokenDecisioning&quot;:&quot;85&quot;,&#xd;
      &quot;walletProviderAccountScore&quot;:&quot;5&quot;,&#xd;
      &quot;walletProviderDeviceScore&quot;:&quot;3&quot;,&#xd;
      &quot;walletProviderReasonCodes&quot;:&quot;A0,A2&quot;,&#xd;
      &quot;accountHolderName&quot;:&quot;abc&quot;&#xd;
   },&#xd;
    &quot;tokenInfo&quot;:{&#xd;
      &quot;token&quot;:&quot;231sddf234da&quot;,&#xd;
      &quot;tokenRequestorName&quot;:&quot;GPay CreateToken&quot;,&#xd;
      &quot;tokenType&quot;:&quot;CARD_ON_FILE&quot;,&#xd;
      &quot;tokenStatus&quot;:&quot;INACTIVE&quot;,&#xd;
      &quot;tokenExpirationDate&quot;:{&#xd;
         &quot;month&quot;:&quot;21&quot;,&#xd;
         &quot;year&quot;:&quot;2024&quot;&#xd;
      },&#xd;
      &quot;tokenAssuranceMethod&quot; : &quot;00&quot;,&#xd;
      &quot;numberOfActiveTokensForPAN&quot;:1,&#xd;
      &quot;numberOfInactiveTokensForPAN&quot;:0,&#xd;
      &quot;numberOfSuspendedTokensForPAN&quot;:0,&#xd;
      &quot;numberOfInactiveTokensForPAN&quot;:0,&#xd;
      &quot;numberOfSuspendedTokensForPAN&quot;:0,&#xd;
      &quot;tokenType&quot;:&quot;CARD_ON_FILE&quot;,&#xd;
      &quot;token&quot;:&quot;4470650144858928&quot;&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">encryption-decryption-utility-lcm-t.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/lcm/encryption</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Get encrypted data for createToken</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">encrypted_Value_CT_Lunar</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedValue</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetEncryptedData-UpdateToken" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;cardholderInfo&quot;:{&#xd;
      &quot;primaryAccountNumber&quot;:&quot;${__P(account_${__threadNum})}&quot;&#xd;
   },&#xd;
   &quot;tokenInfo&quot;:{&#xd;
      &quot;token&quot;:&quot;231sddf234da&quot;,&#xd;
      &quot;tokenRequestorName&quot;:&quot;GPay UpdateToken&quot;,&#xd;
      &quot;tokenType&quot;:&quot;CARD_ON_FILE&quot;,&#xd;
      &quot;tokenStatus&quot;:&quot;ACTIVE&quot;,&#xd;
      &quot;tokenExpirationDate&quot;:{&#xd;
         &quot;month&quot;:&quot;${__P(accountExpMonth_${__threadNum})}&quot;,&#xd;
         &quot;year&quot;:&quot;${__P(accountExpYear_${__threadNum})}&quot;&#xd;
      },&#xd;
      &quot;tokenAssuranceMethod&quot; : &quot;00&quot;,&#xd;
      &quot;numberOfActiveTokensForPAN&quot;:1,&#xd;
      &quot;numberOfInactiveTokensForPAN&quot;:0,&#xd;
      &quot;numberOfSuspendedTokensForPAN&quot;:0,&#xd;
      &quot;numberOfInactiveTokensForPAN&quot;:0,&#xd;
      &quot;numberOfSuspendedTokensForPAN&quot;:0,&#xd;
      &quot;tokenType&quot;:&quot;CARD_ON_FILE&quot;,&#xd;
      &quot;token&quot;:&quot;4470650144858928&quot;&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">encryption-decryption-utility-lcm-t.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/lcm/encryption</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Get encrypted data for updateToken</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">encrypted_Value_UT_Lunar</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.encryptedValue</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
          <stringProp name="BeanShellAssertion.query">${__setProperty(encryptedDataCELunar_${__threadNum}, ${encrypted_Value_CE_Lunar})};
${__setProperty(encryptedDataAPLunarGreen_${__threadNum}, ${encrypted_Value_AP_Lunar_Green})};
${__setProperty(encryptedDataAPLunarYellow_${__threadNum}, ${encrypted_Value_AP_Lunar_Yellow})};
${__setProperty(encryptedDataAPLunarOrange_${__threadNum}, ${encrypted_Value_AP_Lunar_Orange})};
${__setProperty(encryptedDataAPLunarRed_${__threadNum}, ${encrypted_Value_AP_Lunar_Red})};
${__setProperty(encryptedDataCVMLunar_${__threadNum}, ${encrypted_Value_CVM_Lunar})};
${__setProperty(encryptedDataSPLunar_${__threadNum}, ${encrypted_Value_SP_Lunar})};
${__setProperty(encryptedDataCTLunar_${__threadNum}, ${encrypted_Value_CT_Lunar})};
${__setProperty(encryptedDataUTLunar_${__threadNum}, ${encrypted_Value_UT_Lunar})};</stringProp>
          <stringProp name="BeanShellAssertion.filename"></stringProp>
          <stringProp name="BeanShellAssertion.parameters"></stringProp>
          <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
        </BeanShellAssertion>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Check eligibility" enabled="true">
        <stringProp name="TestPlan.comments">Load test for check eligibility endpoint</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads,${threadCount})}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">${__Random(0,9999999999)}</stringProp>
          <stringProp name="CounterConfig.end">9999999999</stringProp>
          <stringProp name="CounterConfig.incr">2</stringProp>
          <stringProp name="CounterConfig.name">counter_value</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC001-CheckEligibility" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot; : &quot;${__P(tokenRequestorID_GPay)}&quot;,&#xd;
  &quot;tokenReferenceID&quot; : &quot;${__P(token_reference_${__threadNum})}&quot;,&#xd;
  &quot;panReferenceID&quot; : &quot;${__P(lunarPanRefID)}&quot;,&#xd;
  &quot;panSource&quot; : &quot;ON_FILE&quot;,&#xd;
  &quot;deviceInfo&quot; : {&#xd;
    &quot;deviceID&quot; : &quot;QjufknWJmFx86SRih1KkAHA05PE59XSgVx45EoNxUI3CzP6Q&quot;,&#xd;
    &quot;deviceLanguageCode&quot; : &quot;eng&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot; : &quot;${__P(encryptedDataCELunar_${__threadNum})}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">visa-token-service-interface-lcm-${environment}.lcm.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/vts/vtis/v1/checkEligibility</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">abcd0001${counter_value}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SM_USER</stringProp>
                <stringProp name="Header.value">visatokenservicescertout.visa.com </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">props.put(&quot;token_reference_&quot; + ${__threadNum}, vars.get(&quot;counter_value&quot;));</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">cardMetadataInfo</stringProp>
            <stringProp name="EXPECTED_VALUE"></stringProp>
            <boolProp name="JSONVALIDATION">false</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>true</success>
              <label>false</label>
              <code>false</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Approve provisioning - GREEN" enabled="true">
        <stringProp name="TestPlan.comments">Load test for AP endpoint for green flow</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads,${threadCount})}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">${__Random(0,9999999999)}</stringProp>
          <stringProp name="CounterConfig.end">99999999999999</stringProp>
          <stringProp name="CounterConfig.incr">2</stringProp>
          <stringProp name="CounterConfig.name">counter_value</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC002A-ApproveProvisioningGreen" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{ &#xd;
	&quot;panReferenceID&quot;:&quot;${__P(lunarPanRefID)}&quot;,&#xd;
	&quot;walletAccountEmailAddressHash&quot;:&quot;CE62283F46849994E08CADB975A95565C14F86FEE9792907B13A7D7332402988&quot;,&#xd;
	&quot;clientWalletAccountID&quot;:&quot;${__P(clientWalletAccountID)}&quot;,&#xd;
	&quot;panSource&quot;:&quot;ON_FILE&quot;,&#xd;
	&quot;cvv2ResultsCode&quot;:&quot;M&quot;,&#xd;
	&quot;encryptedData&quot;:&quot;${__P(encryptedDataAPLunarGreen_${__threadNum})}&quot;,&#xd;
	&quot;deviceInfo&quot;:{ &#xd;
		&quot;deviceLanguageCode&quot;:&quot;eng&quot;,&#xd;
		&quot;deviceLocation&quot;:&quot;123/-09878768761&quot;,&#xd;
		&quot;deviceIPAddressV4&quot;:&quot;10.240.2.123&quot;,&#xd;
		&quot;tokenProtectionMethod&quot;:&quot;SOFTWARE&quot;&#xd;
	},&#xd;
	&quot;tokenInfo&quot;:{ &#xd;
		&quot;tokenType&quot;:&quot;CARD_ON_FILE&quot;&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">visa-token-service-interface-lcm-${environment}.lcm.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/vts/vtis/v2/tokenRequestors/${__P(tokenRequestorID_GPay)}/tokens/${__P(token_reference_${__threadNum})}/approveProvisioning</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">abcd0001${counter_value}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SM_USER</stringProp>
                <stringProp name="Header.value">visatokenservicescertout.visa.com </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">action_Code</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.actionCode</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">actionCode</stringProp>
            <stringProp name="EXPECTED_VALUE">00</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.info(vars.get(&quot;action_Code&quot;));
props.put(&quot;actionCode_&quot; + ${__threadNum}, vars.get(&quot;action_Code&quot;));
log.info(&quot;actionCode_&quot; + ${__threadNum} + &quot;: &quot; + props.get(&quot;actionCode_&quot; + ${__threadNum}));</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>true</success>
              <label>false</label>
              <code>false</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Approve provisioning - ORANGE" enabled="true">
        <stringProp name="TestPlan.comments">Load test for AP endpoint for orange flow</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads,${threadCount})}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">${__Random(0,9999999999)}</stringProp>
          <stringProp name="CounterConfig.end">99999999999999</stringProp>
          <stringProp name="CounterConfig.incr">2</stringProp>
          <stringProp name="CounterConfig.name">counter_value</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC002C-ApproveProvisioningOrange" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{ &#xd;
	&quot;panReferenceID&quot;:&quot;${__P(lunarPanRefID)}&quot;,&#xd;
	&quot;walletAccountEmailAddressHash&quot;:&quot;CE62283F46849994E08CADB975A95565C14F86FEE9792907B13A7D7332402988&quot;,&#xd;
	&quot;clientWalletAccountID&quot;:&quot;${__P(clientWalletAccountID)}&quot;,&#xd;
	&quot;panSource&quot;:&quot;MOBILE_BANKING_APP&quot;,&#xd;
	&quot;cvv2ResultsCode&quot;:&quot;M&quot;,&#xd;
	&quot;encryptedData&quot;:&quot;${__P(encryptedDataAPLunarOrange_${__threadNum})}&quot;,&#xd;
	&quot;deviceInfo&quot;:{ &#xd;
		&quot;deviceLanguageCode&quot;:&quot;eng&quot;,&#xd;
		&quot;deviceLocation&quot;:&quot;123/-09878768761&quot;,&#xd;
		&quot;deviceIPAddressV4&quot;:&quot;10.240.2.123&quot;,&#xd;
		&quot;tokenProtectionMethod&quot;:&quot;SOFTWARE&quot;&#xd;
	},&#xd;
	&quot;tokenInfo&quot;:{ &#xd;
		&quot;tokenType&quot;:&quot;CARD_ON_FILE&quot;&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">visa-token-service-interface-lcm-${environment}.lcm.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/vts/vtis/v2/tokenRequestors/${__P(tokenRequestorID_ApplePay)}/tokens/${counter_value}/approveProvisioning</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">abcd0001${counter_value}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Issuer-ID" elementType="Header">
                <stringProp name="Header.name">X-Issuer-ID</stringProp>
                <stringProp name="Header.value">${__P(X-Issuer-ID)}</stringProp>
              </elementProp>
              <elementProp name="X-Provider-ID" elementType="Header">
                <stringProp name="Header.name">X-Provider-ID</stringProp>
                <stringProp name="Header.value">${__P(X-Provider-ID)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SM_USER</stringProp>
                <stringProp name="Header.value">visatokenservicescertout.visa.com </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">actionCode</stringProp>
            <stringProp name="EXPECTED_VALUE">85</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>true</success>
              <label>false</label>
              <code>false</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Approve provisioning - YELLOW" enabled="true">
        <stringProp name="TestPlan.comments">Load test for AP endpoint for yellow flow</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads,${threadCount})}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">${__Random(0,9999999999)}</stringProp>
          <stringProp name="CounterConfig.end">99999999999999</stringProp>
          <stringProp name="CounterConfig.incr">2</stringProp>
          <stringProp name="CounterConfig.name">counter_value</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC002B-ApproveProvisioningYellow" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{ &#xd;
	&quot;panReferenceID&quot;:&quot;${__P(lunarPanRefID)}&quot;,&#xd;
	&quot;walletAccountEmailAddressHash&quot;:&quot;CE62283F46849994E08CADB975A95565C14F86FEE9792907B13A7D7332402988&quot;,&#xd;
	&quot;clientWalletAccountID&quot;:&quot;${__P(clientWalletAccountID)}&quot;,&#xd;
	&quot;panSource&quot;:&quot;ON_FILE&quot;,&#xd;
	&quot;cvv2ResultsCode&quot;:&quot;M&quot;,&#xd;
	&quot;encryptedData&quot;:&quot;${__P(encryptedDataAPLunarYellow_${__threadNum})}&quot;,&#xd;
	&quot;deviceInfo&quot;:{ &#xd;
		&quot;deviceLanguageCode&quot;:&quot;eng&quot;,&#xd;
		&quot;deviceLocation&quot;:&quot;123/-09878768761&quot;,&#xd;
		&quot;deviceIPAddressV4&quot;:&quot;10.240.2.123&quot;,&#xd;
		&quot;tokenProtectionMethod&quot;:&quot;SOFTWARE&quot;&#xd;
	},&#xd;
	&quot;tokenInfo&quot;:{ &#xd;
		&quot;tokenType&quot;:&quot;SECURE_ELEMENT&quot;&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">visa-token-service-interface-lcm-${environment}.lcm.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/vts/vtis/v2/tokenRequestors/${__P(tokenRequestorID_GPay)}/tokens/${__P(token_reference_${__threadNum})}/approveProvisioning</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">abcd0001${counter_value}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SM_USER</stringProp>
                <stringProp name="Header.value">visatokenservicescertout.visa.com </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">actionCode</stringProp>
            <stringProp name="EXPECTED_VALUE">85</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>true</success>
              <label>false</label>
              <code>false</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Approve provisioning - RED" enabled="true">
        <stringProp name="TestPlan.comments">Load test for AP endpoint for red flow</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads,${threadCount})}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">${__Random(0,9999999999)}</stringProp>
          <stringProp name="CounterConfig.end">99999999999999</stringProp>
          <stringProp name="CounterConfig.incr">2</stringProp>
          <stringProp name="CounterConfig.name">counter_value</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC002D-ApproveProvisioningRed" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{ &#xd;
	&quot;panReferenceID&quot;:&quot;${__P(lunarPanRefID)}&quot;,&#xd;
	&quot;walletAccountEmailAddressHash&quot;:&quot;CE62283F46849994E08CADB975A95565C14F86FEE9792907B13A7D7332402988&quot;,&#xd;
	&quot;clientWalletAccountID&quot;:&quot;${__P(clientWalletAccountID)}&quot;,&#xd;
	&quot;panSource&quot;:&quot;ON_FILE&quot;,&#xd;
	&quot;cvv2ResultsCode&quot;:&quot;M&quot;,&#xd;
	&quot;encryptedData&quot;:&quot;${__P(encryptedDataAPLunarRed_${__threadNum})}&quot;,&#xd;
	&quot;deviceInfo&quot;:{ &#xd;
		&quot;deviceLanguageCode&quot;:&quot;eng&quot;,&#xd;
		&quot;deviceLocation&quot;:&quot;123/-09878768761&quot;,&#xd;
		&quot;deviceIPAddressV4&quot;:&quot;10.240.2.123&quot;,&#xd;
		&quot;tokenProtectionMethod&quot;:&quot;SOFTWARE&quot;&#xd;
	},&#xd;
	&quot;tokenInfo&quot;:{ &#xd;
		&quot;tokenType&quot;:&quot;CARD_ON_FILE&quot;&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">visa-token-service-interface-lcm-${environment}.lcm.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/vts/vtis/v2/tokenRequestors/${__P(tokenRequestorID_ApplePay)}/tokens/${counter_value}/approveProvisioning</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">abcd0001${counter_value}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SM_USER</stringProp>
                <stringProp name="Header.value">visatokenservicescertout.visa.com </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">actionCode</stringProp>
            <stringProp name="EXPECTED_VALUE">05</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>true</success>
              <label>false</label>
              <code>false</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Get cardholder verification methods" enabled="true">
        <stringProp name="TestPlan.comments">Load test for getCVM endpoint</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads,${threadCount})}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">${__Random(0,9999999999)}</stringProp>
          <stringProp name="CounterConfig.end">99999999999999</stringProp>
          <stringProp name="CounterConfig.incr">2</stringProp>
          <stringProp name="CounterConfig.name">counter_value</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC003-GetCVM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;tokenRequestorID&quot;:&quot;${__P(tokenRequestorID_GPay)}&quot;,&#xd;
   &quot;tokenReferenceID&quot;:&quot;${__P(token_reference_${__threadNum})}&quot;,&#xd;
   &quot;panReferenceID&quot;:&quot;${__P(lunarPanRefID)}&quot;,&#xd;
   &quot;clientWalletAccountID&quot;:&quot;${__P(clientWalletAccountID)}&quot;,&#xd;
   &quot;otpReason&quot;:&quot;PROVISIONING&quot;,&#xd;
   &quot;otpMaxReached&quot;:false,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;deviceID&quot;:&quot;15756162049581446344787831&quot;,&#xd;
      &quot;deviceType&quot;:&quot;WATCH&quot;&#xd;
   },&#xd;
   &quot;encryptedData&quot;:&quot;${__P(encryptedDataCVMLunar_${__threadNum})}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">visa-token-service-interface-lcm-${environment}.lcm.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/vts/vtis/v1/retrieveStepUpMethods</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">abcd0001${counter_value}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SM_USER</stringProp>
                <stringProp name="Header.value">visatokenservicescertout.visa.com </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">stepUpMethods</stringProp>
            <stringProp name="EXPECTED_VALUE"></stringProp>
            <boolProp name="JSONVALIDATION">false</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">props.put(&quot;identifier_&quot; + ${__threadNum}, vars.get(&quot;identifier&quot;));</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>true</success>
              <label>false</label>
              <code>false</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Send passcode" enabled="true">
        <stringProp name="TestPlan.comments">Load test for sendPasscode endpoint</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads,${threadCount})}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">${__Random(0,99999999)}</stringProp>
          <stringProp name="CounterConfig.end">99999999</stringProp>
          <stringProp name="CounterConfig.incr">2</stringProp>
          <stringProp name="CounterConfig.name">counter_value</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC004-SendPasscode" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;tokenRequestorID&quot;: &quot;${__P(tokenRequestorID_GPay)}&quot;, &#xd;
   &quot;tokenReferenceID&quot;:&quot;${__P(token_reference_${__threadNum})}&quot;,&#xd;
   &quot;panReferenceID&quot;:&quot;${__P(lunarPanRefID)}&quot;,&#xd;
   &quot;clientWalletAccountID&quot;:&quot;${__P(clientWalletAccountID)}&quot;,&#xd;
   &quot;otpMethodIdentifier&quot;:&quot;${__P(identifier_${__threadNum})}&quot;,&#xd;
   &quot;otpValue&quot;:&quot;33019&quot;,&#xd;
   &quot;otpExpirationDate&quot;:&quot;2020-05-21T10:52:36.000Z&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;deviceID&quot;:&quot;15756162049581446344787831&quot;&#xd;
   },&#xd;
   &quot;encryptedData&quot;:&quot;${__P(encryptedDataSPLunar_${__threadNum})}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">visa-token-service-interface-lcm-${environment}.lcm.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/vts/vtis/v1/sendPasscode</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">abcd0001${counter_value}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SM_USER</stringProp>
                <stringProp name="Header.value">visatokenservicescertout.visa.com </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">responseBody</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.*</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">if (vars.get(&quot;responseBody&quot;) != &quot;&quot;) {
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Incorrect response body is returned and the body is \&quot;&quot; + vars.get(&quot;responseBody&quot;) + &quot;\&quot;.&quot;);
}</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
            <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
            <stringProp name="SizeAssertion.size">0</stringProp>
            <intProp name="SizeAssertion.operator">1</intProp>
          </SizeAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>true</success>
              <label>false</label>
              <code>false</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create token" enabled="true">
        <stringProp name="TestPlan.comments">Load test for createToken endpoint</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads,${threadCount})}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">${__Random(0,9999999999)}</stringProp>
          <stringProp name="CounterConfig.end">99999999999999</stringProp>
          <stringProp name="CounterConfig.incr">2</stringProp>
          <stringProp name="CounterConfig.name">counter_value</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC005-CreateToken" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;panReferenceID&quot;:&quot;${lunarPanRefID}&quot;,&#xd;
   &quot;walletAccountEmailAddressHash&quot;:&quot;CE62283F46849994E08CADB975A95565C14F86FEE9792907B13A7D7332402988&quot;,&#xd;
   &quot;clientWalletAccountID&quot;:&quot;${__P(clientWalletAccountID)}&quot;,&#xd;
   &quot;panSource&quot;:&quot;ON_FILE&quot;,&#xd;
   &quot;encryptedData&quot;:&quot;${__P(encryptedDataCTLunar_${__threadNum})}&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;deviceID&quot;:&quot;15718998227402491162039324&quot;,&#xd;
      &quot;deviceLanguageCode&quot;:&quot;eng&quot;,&#xd;
      &quot;deviceType&quot;:&quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
      &quot;deviceName&quot;:&quot;ZGVmYXVsdA..&quot;,&#xd;
      &quot;deviceLocation&quot;:&quot;+51/-0&quot;,&#xd;
      &quot;deviceIPAddressV4&quot;:&quot;81.144.225.139&quot;&#xd;
   },&#xd;
   &quot;messageReasonCode&quot;:&quot;TOKEN_CREATED&quot;,&#xd;
   &quot;termsAndConditions&quot;:{  &#xd;
      &quot;id&quot;:&quot;5ad519dd577a4faca315319683ca0ebe&quot;,&#xd;
      &quot;date&quot;:&quot;2020-01-21T15:27:35.000+0000&quot;&#xd;
   },&#xd;
   &quot;dateTimeOfEvent&quot;:&quot;2020-01-21T15:27:36.000Z&quot;,&#xd;
   &quot;actionCode&quot;:&quot;${__P(actionCode_${__threadNum})}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">visa-token-service-interface-lcm-${environment}.lcm.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/vts/vtis/v2/tokenRequestors/${__P(tokenRequestorID_GPay)}/tokens/${__P(token_reference_${__threadNum})}/tokenChanged?eventType=TOKEN_CREATED</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">abcd0001${counter_value}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SM_USER</stringProp>
                <stringProp name="Header.value">visatokenservicescertout.visa.com </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">responseBody</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.*</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">if (vars.get(&quot;responseBody&quot;) != &quot;&quot;) {
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Incorrect response body is returned and the body is \&quot;&quot; + vars.get(&quot;responseBody&quot;) + &quot;\&quot;.&quot;);
}</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
            <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
            <stringProp name="SizeAssertion.size">0</stringProp>
            <intProp name="SizeAssertion.operator">1</intProp>
          </SizeAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>true</success>
              <label>false</label>
              <code>false</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Update token" enabled="true">
        <stringProp name="TestPlan.comments">Load test for updateToken endpoint</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads,${threadCount})}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">${__Random(0,9999999999)}</stringProp>
          <stringProp name="CounterConfig.end">99999999999999</stringProp>
          <stringProp name="CounterConfig.incr">2</stringProp>
          <stringProp name="CounterConfig.name">counter_value</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC006-UpdateToken" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;panReferenceID&quot;:&quot;${lunarPanRefID}&quot;,&#xd;
   &quot;walletAccountEmailAddressHash&quot;:&quot;CE62283F46849994E08CADB975A95565C14F86FEE9792907B13A7D7332402988&quot;,&#xd;
   &quot;clientWalletAccountID&quot;:&quot;${__P(clientWalletAccountID)}&quot;,&#xd;
   &quot;panSource&quot;:&quot;ON_FILE&quot;,&#xd;
   &quot;encryptedData&quot;:&quot;${__P(encryptedDataUTLunar_${__threadNum})}&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;deviceID&quot;:&quot;15718998227402491162039324&quot;,&#xd;
      &quot;deviceLanguageCode&quot;:&quot;eng&quot;,&#xd;
      &quot;deviceType&quot;:&quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
      &quot;deviceName&quot;:&quot;ZGVmYXVsdA..&quot;,&#xd;
      &quot;deviceLocation&quot;:&quot;+51/-0&quot;,&#xd;
      &quot;deviceIPAddressV4&quot;:&quot;81.144.225.139&quot;&#xd;
   },&#xd;
   &quot;messageReasonCode&quot;:&quot;TOKEN_STATUS_UPDATED&quot;,&#xd;
   &quot;termsAndConditions&quot;:{  &#xd;
      &quot;id&quot;:&quot;5ad519dd577a4faca315319683ca0ebe&quot;,&#xd;
      &quot;date&quot;:&quot;2020-01-21T15:27:35.000+0000&quot;&#xd;
   },&#xd;
   &quot;dateTimeOfEvent&quot;:&quot;2020-01-21T15:27:36.000Z&quot;,&#xd;
   &quot;actionCode&quot;:&quot;${__P(actionCode_${__threadNum})}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">visa-token-service-interface-lcm-${environment}.lcm.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/vts/vtis/v2/tokenRequestors/${__P(tokenRequestorID_GPay)}/tokens/${__P(token_reference_${__threadNum})}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">abcd0001${counter_value}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SM_USER</stringProp>
                <stringProp name="Header.value">visatokenservicescertout.visa.com </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">responseBody</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.*</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">if (vars.get(&quot;responseBody&quot;) != &quot;&quot;) {
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Incorrect response body is returned and the body is \&quot;&quot; + vars.get(&quot;responseBody&quot;) + &quot;\&quot;.&quot;);
}</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
            <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
            <stringProp name="SizeAssertion.size">0</stringProp>
            <intProp name="SizeAssertion.operator">1</intProp>
          </SizeAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>true</success>
              <label>false</label>
              <code>false</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Device binding" enabled="true">
        <stringProp name="TestPlan.comments">Load test for deviceBinding endpoint</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads,${threadCount})}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">${__Random(0,99999999999)}</stringProp>
          <stringProp name="CounterConfig.end">99999999999</stringProp>
          <stringProp name="CounterConfig.incr">2</stringProp>
          <stringProp name="CounterConfig.name">counter_value</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC007A-CheckEligibility" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot; : &quot;${__P(tokenRequestorID_DeviceBinding)}&quot;,&#xd;
  &quot;tokenReferenceID&quot; : &quot;${counter_value}&quot;,&#xd;
  &quot;panReferenceID&quot; : &quot;${__P(lunarPanRefID)}&quot;,&#xd;
  &quot;panSource&quot; : &quot;ON_FILE&quot;,&#xd;
  &quot;deviceInfo&quot; : {&#xd;
    &quot;deviceID&quot; : &quot;QjufknWJmFx86SRih1KkAHA05PE59XSgVx45EoNxUI3CzP6Q&quot;,&#xd;
    &quot;deviceLanguageCode&quot; : &quot;eng&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot; : &quot;${__P(encryptedDataCELunar_${__threadNum})}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">visa-token-service-interface-lcm-${environment}.lcm.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/vts/vtis/v1/checkEligibility</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">props.put(&quot;token_reference_&quot; + ${__threadNum}, vars.get(&quot;counter_value&quot;));</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">abcd0001${counter_value}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SM_USER</stringProp>
                <stringProp name="Header.value">visatokenservicescertout.visa.com </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">cardMetadataInfo</stringProp>
            <stringProp name="EXPECTED_VALUE"></stringProp>
            <boolProp name="JSONVALIDATION">false</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC007B-ApproveProvisioningGreen" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{ &#xd;
	&quot;panReferenceID&quot;:&quot;${__P(lunarPanRefID)}&quot;,&#xd;
	&quot;walletAccountEmailAddressHash&quot;:&quot;CE62283F46849994E08CADB975A95565C14F86FEE9792907B13A7D7332402988&quot;,&#xd;
	&quot;clientWalletAccountID&quot;:&quot;${__P(clientWalletAccountID)}&quot;,&#xd;
	&quot;panSource&quot;:&quot;ON_FILE&quot;,&#xd;
	&quot;cvv2ResultsCode&quot;:&quot;M&quot;,&#xd;
	&quot;encryptedData&quot;:&quot;${__P(encryptedDataAPLunarGreen_${__threadNum})}&quot;,&#xd;
	&quot;deviceInfo&quot;:{ &#xd;
		&quot;deviceLanguageCode&quot;:&quot;eng&quot;,&#xd;
		&quot;deviceLocation&quot;:&quot;123/-09878768761&quot;,&#xd;
		&quot;deviceIPAddressV4&quot;:&quot;10.240.2.123&quot;,&#xd;
		&quot;tokenProtectionMethod&quot;:&quot;SOFTWARE&quot;&#xd;
	},&#xd;
	&quot;tokenInfo&quot;:{ &#xd;
		&quot;tokenType&quot;:&quot;CARD_ON_FILE&quot;&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">visa-token-service-interface-lcm-${environment}.lcm.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/vts/vtis/v2/tokenRequestors/${__P(tokenRequestorID_DeviceBinding)}/tokens/${counter_value}/approveProvisioning</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">abcd0001${counter_value}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SM_USER</stringProp>
                <stringProp name="Header.value">visatokenservicescertout.visa.com </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">action_Code</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.actionCode</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">actionCode</stringProp>
            <stringProp name="EXPECTED_VALUE">00</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.info(vars.get(&quot;action_Code&quot;));
props.put(&quot;actionCode_&quot; + ${__threadNum}, vars.get(&quot;action_Code&quot;));
log.info(&quot;actionCode_&quot; + ${__threadNum} + &quot;: &quot; + props.get(&quot;actionCode_&quot; + ${__threadNum}));</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC007C-GetCVM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;tokenRequestorID&quot;:&quot;${__P(tokenRequestorID_DeviceBinding)}&quot;,&#xd;
   &quot;tokenReferenceID&quot;:&quot;${counter_value}&quot;,&#xd;
   &quot;panReferenceID&quot;:&quot;${__P(lunarPanRefID)}&quot;,&#xd;
   &quot;clientWalletAccountID&quot;:&quot;${__P(clientWalletAccountID)}&quot;,&#xd;
   &quot;otpReason&quot;:&quot;PROVISIONING&quot;,&#xd;
   &quot;otpMaxReached&quot;:false,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;deviceID&quot;:&quot;15756162049581446344787831&quot;,&#xd;
      &quot;deviceType&quot;:&quot;WATCH&quot;&#xd;
   },&#xd;
   &quot;encryptedData&quot;:&quot;${__P(encryptedDataCVMLunar_${__threadNum})}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">visa-token-service-interface-lcm-${environment}.lcm.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/vts/vtis/v1/retrieveStepUpMethods</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">abcd0001${counter_value}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SM_USER</stringProp>
                <stringProp name="Header.value">visatokenservicescertout.visa.com </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">stepUpMethods</stringProp>
            <stringProp name="EXPECTED_VALUE"></stringProp>
            <boolProp name="JSONVALIDATION">false</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">props.put(&quot;identifier_&quot; + ${__threadNum}, vars.get(&quot;identifier&quot;));</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC007D-SendPasscode" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;tokenRequestorID&quot;: &quot;${__P(tokenRequestorID_DeviceBinding)}&quot;, &#xd;
   &quot;tokenReferenceID&quot;: &quot;${counter_value}&quot;,&#xd;
   &quot;panReferenceID&quot;: &quot;${__P(lunarPanRefID)}&quot;,&#xd;
   &quot;clientWalletAccountID&quot;:&quot;${__P(clientWalletAccountID)}&quot;,&#xd;
   &quot;otpMethodIdentifier&quot;:&quot;${__P(identifier_${__threadNum})}&quot;,&#xd;
   &quot;otpValue&quot;:&quot;33019&quot;,&#xd;
   &quot;otpExpirationDate&quot;:&quot;2020-05-21T10:52:36.000Z&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;deviceID&quot;:&quot;15756162049581446344787831&quot;&#xd;
   },&#xd;
   &quot;encryptedData&quot;:&quot;${__P(encryptedDataSPLunar_${__threadNum})}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">visa-token-service-interface-lcm-${environment}.lcm.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/vts/vtis/v1/sendPasscode</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">abcd0001${counter_value}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SM_USER</stringProp>
                <stringProp name="Header.value">visatokenservicescertout.visa.com </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">responseBody</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.*</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">if (vars.get(&quot;responseBody&quot;) != &quot;&quot;) {
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Incorrect response body is returned and the body is \&quot;&quot; + vars.get(&quot;responseBody&quot;) + &quot;\&quot;.&quot;);
}</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
            <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
            <stringProp name="SizeAssertion.size">0</stringProp>
            <intProp name="SizeAssertion.operator">1</intProp>
          </SizeAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC007E-CreateToken" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;panReferenceID&quot;:&quot;${__P(lunarPanRefID)}&quot;,&#xd;
   &quot;walletAccountEmailAddressHash&quot;:&quot;CE62283F46849994E08CADB975A95565C14F86FEE9792907B13A7D7332402988&quot;,&#xd;
   &quot;clientWalletAccountID&quot;:&quot;${__P(clientWalletAccountID)}&quot;,&#xd;
   &quot;panSource&quot;:&quot;ON_FILE&quot;,&#xd;
   &quot;encryptedData&quot;:&quot;${__P(encryptedDataCTLunar_${__threadNum})}&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;deviceID&quot;:&quot;15718998227402491162039324&quot;,&#xd;
      &quot;deviceLanguageCode&quot;:&quot;eng&quot;,&#xd;
      &quot;deviceType&quot;:&quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
      &quot;deviceName&quot;:&quot;ZGVmYXVsdA..&quot;,&#xd;
      &quot;deviceLocation&quot;:&quot;+51/-0&quot;,&#xd;
      &quot;deviceIPAddressV4&quot;:&quot;81.144.225.139&quot;&#xd;
   },&#xd;
   &quot;messageReasonCode&quot;:&quot;TOKEN_CREATED&quot;,&#xd;
   &quot;termsAndConditions&quot;:{  &#xd;
      &quot;id&quot;:&quot;5ad519dd577a4faca315319683ca0ebe&quot;,&#xd;
      &quot;date&quot;:&quot;2020-01-21T15:27:35.000+0000&quot;&#xd;
   },&#xd;
   &quot;dateTimeOfEvent&quot;:&quot;2020-01-21T15:27:36.000Z&quot;,&#xd;
   &quot;actionCode&quot;:&quot;${__P(actionCode_${__threadNum})}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">visa-token-service-interface-lcm-${environment}.lcm.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/vts/vtis/v2/tokenRequestors/${__P(tokenRequestorID_DeviceBinding)}/tokens/${counter_value}/tokenChanged?eventType=TOKEN_CREATED</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">abcd0001${counter_value}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SM_USER</stringProp>
                <stringProp name="Header.value">visatokenservicescertout.visa.com </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">responseBody</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.*</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">if (vars.get(&quot;responseBody&quot;) != &quot;&quot;) {
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Incorrect response body is returned and the body is \&quot;&quot; + vars.get(&quot;responseBody&quot;) + &quot;\&quot;.&quot;);
}</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
            <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
            <stringProp name="SizeAssertion.size">0</stringProp>
            <intProp name="SizeAssertion.operator">1</intProp>
          </SizeAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC007F-UpdateToken" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;panReferenceID&quot;:&quot;${__P(lunarPanRefID)}&quot;,&#xd;
   &quot;walletAccountEmailAddressHash&quot;:&quot;CE62283F46849994E08CADB975A95565C14F86FEE9792907B13A7D7332402988&quot;,&#xd;
   &quot;clientWalletAccountID&quot;:&quot;${__P(clientWalletAccountID)}&quot;,&#xd;
   &quot;panSource&quot;:&quot;ON_FILE&quot;,&#xd;
   &quot;encryptedData&quot;:&quot;${__P(encryptedDataUTLunar_${__threadNum})}&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;deviceID&quot;:&quot;15718998227402491162039324&quot;,&#xd;
      &quot;deviceLanguageCode&quot;:&quot;eng&quot;,&#xd;
      &quot;deviceType&quot;:&quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
      &quot;deviceName&quot;:&quot;ZGVmYXVsdA..&quot;,&#xd;
      &quot;deviceLocation&quot;:&quot;+51/-0&quot;,&#xd;
      &quot;deviceIPAddressV4&quot;:&quot;81.144.225.139&quot;&#xd;
   },&#xd;
   &quot;messageReasonCode&quot;:&quot;TOKEN_STATUS_UPDATED&quot;,&#xd;
   &quot;termsAndConditions&quot;:{  &#xd;
      &quot;id&quot;:&quot;5ad519dd577a4faca315319683ca0ebe&quot;,&#xd;
      &quot;date&quot;:&quot;2020-01-21T15:27:35.000+0000&quot;&#xd;
   },&#xd;
   &quot;dateTimeOfEvent&quot;:&quot;2020-01-21T15:27:36.000Z&quot;,&#xd;
   &quot;actionCode&quot;:&quot;${__P(actionCode_${__threadNum})}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">visa-token-service-interface-lcm-${environment}.lcm.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/vts/vtis/v2/tokenRequestors/${__P(tokenRequestorID_DeviceBinding)}/tokens/${counter_value}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">abcd0001${counter_value}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SM_USER</stringProp>
                <stringProp name="Header.value">visatokenservicescertout.visa.com </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">responseBody</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.*</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">if (vars.get(&quot;responseBody&quot;) != &quot;&quot;) {
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Incorrect response body is returned and the body is \&quot;&quot; + vars.get(&quot;responseBody&quot;) + &quot;\&quot;.&quot;);
}</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
            <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
            <stringProp name="SizeAssertion.size">0</stringProp>
            <intProp name="SizeAssertion.operator">1</intProp>
          </SizeAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC007-DeviceBinding" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;panReferenceID&quot;:&quot;${__P(lunarPanRefID)}&quot;,&#xd;
	&quot;walletAccountEmailAddressHash&quot;:&quot;CE62283F46849994E08CADB975A95565C14F86FEE9792907B13A7D7332402988&quot;,&#xd;
	&quot;clientWalletAccountID&quot;:&quot;${__P(clientWalletAccountID)}&quot;,&#xd;
	&quot;deviceInfo&quot;:{&#xd;
		 &quot;deviceID&quot;:&quot;${counter_value}&quot;,&#xd;
		 &quot;deviceLanguageCode&quot;:&quot;eng&quot;,&#xd;
		 &quot;deviceType&quot;:&quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
		 &quot;deviceName&quot;:&quot;ZGVmYXVsdA..&quot;,&#xd;
		 &quot;deviceIPAddressV4&quot;:&quot;93.106.93.231&quot;,&#xd;
		 &quot;deviceIndex&quot;: 1&#xd;
	},&#xd;
	&quot;tokenRequestorName&quot;:&quot;GPay DeviceBinding&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">visa-token-service-interface-lcm-${environment}.lcm.paas-test.bbsas.no</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/vts/vtis/v1/tokenRequestors/${__P(tokenRequestorID_DeviceBinding)}/tokens/${counter_value}/deviceBinding</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">abcd0001${counter_value}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SM_USER</stringProp>
                <stringProp name="Header.value">visatokenservicescertout.visa.com </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">actionCode</stringProp>
            <stringProp name="EXPECTED_VALUE">85</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>true</success>
              <label>false</label>
              <code>false</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="Teardown" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Cleanup" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.jmeter.threads.JMeterVariables; 
	
try {
	//Clear all user defined variables
	JMeterVariables clean = new JMeterVariables(); 
	vars = clean;
	for (var idx=1; idx &lt;= ${threadCount}; idx++) {
		vars.put(&quot;idx&quot;, idx+&quot;&quot;);

		props.remove(&quot;account_&quot; + vars.get(&quot;idx&quot;));
		props.remove(&quot;accountExpMonth_&quot; + vars.get(&quot;idx&quot;));
		props.remove(&quot;accountExpYear_&quot; + vars.get(&quot;idx&quot;));
		props.remove(&quot;token_reference_&quot; + vars.get(&quot;idx&quot;));		
	}
	
	props.remove(&quot;environment&quot;);
	props.remove(&quot;panLunar&quot;);
	props.remove(&quot;encryptedDataLunarExpMonth&quot;);
	props.remove(&quot;encryptedDataLunarExpYear&quot;);
	props.remove(&quot;clientWalletAccountID&quot;);
	props.remove(&quot;lunarPanRefID&quot;);
	props.remove(&quot;tokenRequestorID_GPay&quot;);
	props.remove(&quot;tokenRequestorID_ApplePay&quot;);
	props.remove(&quot;tokenRequestorID_DeviceBinding&quot;);	
	props.remove(&quot;encryptedDataCELunar&quot;);
	props.remove(&quot;encryptedDataAPLunarGreen&quot;);
	props.remove(&quot;encryptedDataAPLunarYellow&quot;);
	props.remove(&quot;encryptedDataAPLunarOrange&quot;);
	props.remove(&quot;encryptedDataAPLunarRed&quot;);	
	props.remove(&quot;encryptedDataCVMLunar&quot;);	
	props.remove(&quot;encryptedDataSPLunar&quot;);	
	props.remove(&quot;encryptedDataCTLunar&quot;);
	props.remove(&quot;encryptedDataUTLunar&quot;);
} catch (Exception e) {
	log.error(e.getMessage());
}
</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
